// <auto-generated />
using System;
using GQLDEMOTUT.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GQLDEMOTUT.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220715154828_InitSocialDB")]
    partial class InitSocialDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.7");

            modelBuilder.Entity("GQLDEMOTUT.Entities.CommentToPostOrComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CommentBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CommentOnCommentID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CommentOnPostID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CommentedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommentBy");

                    b.HasIndex("CommentOnPostID");

                    b.ToTable("CommentToPostOrComment");
                });

            modelBuilder.Entity("GQLDEMOTUT.Entities.GQLUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GQLUser");
                });

            modelBuilder.Entity("GQLDEMOTUT.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PostedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PostedBy");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("GQLDEMOTUT.Entities.ReactToPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReactToPostOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ReactedTOPost")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ReactionBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReactionTaken")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReactedTOPost");

                    b.HasIndex("ReactionBy");

                    b.ToTable("ReactToPost");
                });

            modelBuilder.Entity("GQLDEMOTUT.Entities.CommentToPostOrComment", b =>
                {
                    b.HasOne("GQLDEMOTUT.Entities.GQLUser", "Commentor")
                        .WithMany("UserComments")
                        .HasForeignKey("CommentBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GQLDEMOTUT.Entities.CommentToPostOrComment", "CommentParent")
                        .WithMany("CommentComments")
                        .HasForeignKey("CommentOnPostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GQLDEMOTUT.Entities.Post", "MainPost")
                        .WithMany("PostComments")
                        .HasForeignKey("CommentOnPostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentParent");

                    b.Navigation("Commentor");

                    b.Navigation("MainPost");
                });

            modelBuilder.Entity("GQLDEMOTUT.Entities.Post", b =>
                {
                    b.HasOne("GQLDEMOTUT.Entities.GQLUser", "PostOwner")
                        .WithMany("UserPosts")
                        .HasForeignKey("PostedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostOwner");
                });

            modelBuilder.Entity("GQLDEMOTUT.Entities.ReactToPost", b =>
                {
                    b.HasOne("GQLDEMOTUT.Entities.Post", "ReactedPost")
                        .WithMany("PostReactions")
                        .HasForeignKey("ReactedTOPost")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GQLDEMOTUT.Entities.GQLUser", "Reactor")
                        .WithMany("UserReactions")
                        .HasForeignKey("ReactionBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReactedPost");

                    b.Navigation("Reactor");
                });

            modelBuilder.Entity("GQLDEMOTUT.Entities.CommentToPostOrComment", b =>
                {
                    b.Navigation("CommentComments");
                });

            modelBuilder.Entity("GQLDEMOTUT.Entities.GQLUser", b =>
                {
                    b.Navigation("UserComments");

                    b.Navigation("UserPosts");

                    b.Navigation("UserReactions");
                });

            modelBuilder.Entity("GQLDEMOTUT.Entities.Post", b =>
                {
                    b.Navigation("PostComments");

                    b.Navigation("PostReactions");
                });
#pragma warning restore 612, 618
        }
    }
}
